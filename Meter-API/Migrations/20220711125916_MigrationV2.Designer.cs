// <auto-generated />
using System;
using Meter_API.Repositories.Cities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Meter_API.Migrations
{
    [DbContext(typeof(MetersDbContext))]
    [Migration("20220711125916_MigrationV2")]
    partial class MigrationV2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Meter_API.Models.Buildings", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("Facilitiesid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Facilitiesid");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("Meter_API.Models.Cities", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Meter_API.Models.Facilities", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("Citiesid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Citiesid");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Meter_API.Models.Floors", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("Buildingsid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Buildingsid");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("Meter_API.Models.Meters", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("Zonesid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Zonesid");

                    b.ToTable("meters");
                });

            modelBuilder.Entity("Meter_API.Models.Zones", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("Floorsid")
                        .HasColumnType("bigint");

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Floorsid");

                    b.ToTable("zones");
                });

            modelBuilder.Entity("Meter_API.Models.Buildings", b =>
                {
                    b.HasOne("Meter_API.Models.Facilities", null)
                        .WithMany("buildings")
                        .HasForeignKey("Facilitiesid");
                });

            modelBuilder.Entity("Meter_API.Models.Facilities", b =>
                {
                    b.HasOne("Meter_API.Models.Cities", null)
                        .WithMany("facilities")
                        .HasForeignKey("Citiesid");
                });

            modelBuilder.Entity("Meter_API.Models.Floors", b =>
                {
                    b.HasOne("Meter_API.Models.Buildings", null)
                        .WithMany("floors")
                        .HasForeignKey("Buildingsid");
                });

            modelBuilder.Entity("Meter_API.Models.Meters", b =>
                {
                    b.HasOne("Meter_API.Models.Zones", null)
                        .WithMany("meters")
                        .HasForeignKey("Zonesid");
                });

            modelBuilder.Entity("Meter_API.Models.Zones", b =>
                {
                    b.HasOne("Meter_API.Models.Floors", null)
                        .WithMany("zones")
                        .HasForeignKey("Floorsid");
                });

            modelBuilder.Entity("Meter_API.Models.Buildings", b =>
                {
                    b.Navigation("floors");
                });

            modelBuilder.Entity("Meter_API.Models.Cities", b =>
                {
                    b.Navigation("facilities");
                });

            modelBuilder.Entity("Meter_API.Models.Facilities", b =>
                {
                    b.Navigation("buildings");
                });

            modelBuilder.Entity("Meter_API.Models.Floors", b =>
                {
                    b.Navigation("zones");
                });

            modelBuilder.Entity("Meter_API.Models.Zones", b =>
                {
                    b.Navigation("meters");
                });
#pragma warning restore 612, 618
        }
    }
}
